[{"_path":"/v1/community/snippets","_draft":false,"_partial":false,"_empty":false,"title":"Snippets","description":"Learn how to implement @nuxt/content into your app with these code snippets.","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"h3","props":{"id":"asyncdata"},"children":[{"type":"text","value":"asyncData"}]},{"type":"element","tag":"code","props":{"code":"export default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug).fetch()\n\n    return {\n      article\n    }\n  }\n}\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug).fetch()\n\n    return {\n      article\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"head"},"children":[{"type":"text","value":"head"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add dynamic metas based on title and description defined in the "},{"type":"element","tag":"a","props":{"href":"https://content.nuxtjs.org/writing#front-matter","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"front-matter"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"export default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug).fetch()\n\n    return {\n      article\n    }\n  },\n  head() {\n    return {\n      title: this.article.title,\n      meta: [\n        { hid: 'description', name: 'description', content: this.article.description },\n        // Open Graph\n        { hid: 'og:title', property: 'og:title', content: this.article.title },\n        { hid: 'og:description', property: 'og:description', content: this.article.description },\n        // Twitter Card\n        { hid: 'twitter:title', name: 'twitter:title', content: this.article.title },\n        { hid: 'twitter:description', name: 'twitter:description', content: this.article.description }\n      ]\n    }\n  }\n}\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug).fetch()\n\n    return {\n      article\n    }\n  },\n  head() {\n    return {\n      title: this.article.title,\n      meta: [\n        { hid: 'description', name: 'description', content: this.article.description },\n        // Open Graph\n        { hid: 'og:title', property: 'og:title', content: this.article.title },\n        { hid: 'og:description', property: 'og:description', content: this.article.description },\n        // Twitter Card\n        { hid: 'twitter:title', name: 'twitter:title', content: this.article.title },\n        { hid: 'twitter:description', name: 'twitter:description', content: this.article.description }\n      ]\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"features"},"children":[{"type":"text","value":"Features"}]},{"type":"element","tag":"h3","props":{"id":"search"},"children":[{"type":"text","value":"Search"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add a search input component by using watch:"}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <div>\n    <input v-model=\"query\" type=\"search\" autocomplete=\"off\" />\n\n    <ul v-if=\"articles.length\">\n      <li v-for=\"article of articles\" :key=\"article.slug\">\n        <NuxtLink :to=\"{ name: 'blog-slug', params: { slug: article.slug } }\">{{ article.title }}</NuxtLink>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      query: '',\n      articles: []\n    }\n  },\n  watch: {\n    async query (query) {\n      if (!query) {\n        this.articles = []\n        return\n      }\n\n      this.articles = await this.$content('articles')\n        .only(['title', 'slug'])\n        .sortBy('createdAt', 'asc')\n        .limit(12)\n        .search(query)\n        .fetch()\n    }\n  }\n}\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div>\n    <input v-model=\"query\" type=\"search\" autocomplete=\"off\" />\n\n    <ul v-if=\"articles.length\">\n      <li v-for=\"article of articles\" :key=\"article.slug\">\n        <NuxtLink :to=\"{ name: 'blog-slug', params: { slug: article.slug } }\">{{ article.title }}</NuxtLink>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      query: '',\n      articles: []\n    }\n  },\n  watch: {\n    async query (query) {\n      if (!query) {\n        this.articles = []\n        return\n      }\n\n      this.articles = await this.$content('articles')\n        .only(['title', 'slug'])\n        .sortBy('createdAt', 'asc')\n        .limit(12)\n        .search(query)\n        .fetch()\n    }\n  }\n}\n</script>\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Check out the "},{"type":"element","tag":"a","props":{"href":"/fetching#searchfield-value"},"children":[{"type":"text","value":"search documentation"}]}]}]},{"type":"element","tag":"h3","props":{"id":"prev-and-next"},"children":[{"type":"text","value":"Prev and Next"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add previous and next links using the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"surround"}]},{"type":"text","value":" method:"}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <div>\n    <NuxtLink v-if=\"prev\" :to=\"{ name: 'blog-slug', params: { slug: prev.slug } }\">\n      {{ prev.title }}\n    </NuxtLink>\n\n    <NuxtLink v-if=\"next\" :to=\"{ name: 'blog-slug', params: { slug: next.slug } }\">\n      {{ next.title }}\n    </NuxtLink>\n  </div>\n</template>\n\n<script>\nexport default {\n  async asyncData({ $content, params }) {\n    const [prev, next] = await $content('articles')\n      .only(['title', 'slug'])\n      .sortBy('createdAt', 'asc')\n      .surround(params.slug)\n      .fetch()\n\n    return {\n      prev,\n      next\n    }\n  }\n}\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div>\n    <NuxtLink v-if=\"prev\" :to=\"{ name: 'blog-slug', params: { slug: prev.slug } }\">\n      {{ prev.title }}\n    </NuxtLink>\n\n    <NuxtLink v-if=\"next\" :to=\"{ name: 'blog-slug', params: { slug: next.slug } }\">\n      {{ next.title }}\n    </NuxtLink>\n  </div>\n</template>\n\n<script>\nexport default {\n  async asyncData({ $content, params }) {\n    const [prev, next] = await $content('articles')\n      .only(['title', 'slug'])\n      .sortBy('createdAt', 'asc')\n      .surround(params.slug)\n      .fetch()\n\n    return {\n      prev,\n      next\n    }\n  }\n}\n</script>\n"}]}]}]},{"type":"element","tag":"alert","props":{"type":"info"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If more than one document has the same slug, you should set "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"path"}]},{"type":"text","value":" as the first argument of the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"surround"}]},{"type":"text","value":" method, instead of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"slug"}]},{"type":"text","value":".\nThis is because Nuxt Content finds previous and next documents based on the one that matched first."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example, if you sort documents according to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"position"}]},{"type":"text","value":", the lower-positioned document will be always used for calculation,\neven when the current page is showing the higer-positioned document."}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Check out the "},{"type":"element","tag":"a","props":{"href":"/fetching#surroundslugorpath-options"},"children":[{"type":"text","value":"surround documentation"}]}]}]},{"type":"element","tag":"h3","props":{"id":"case-insensitive-sorting"},"children":[{"type":"text","value":"Case-Insensitive Sorting"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It is needed to work around Nuxt Content's case-sensitive sorting, to add extra properties to documents, whose value is lower-cased."}]},{"type":"element","tag":"code","props":{"code":"export default {\n  hooks: {\n    'content:file:beforeInsert': (document) => {\n      if (document.extension === '.md') {\n        Object.entries(document).forEach(([key, value]) => {\n          const _key = `case_insensitive__${key}`; // prefix is arbitrary\n\n          if (!document[_key] && typeof value === 'string') {\n            document[_key] = value.toLocaleLowerCase();\n          }\n        });\n      }\n    }\n  }\n};\n","filename":"nuxt.config.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  hooks: {\n    'content:file:beforeInsert': (document) => {\n      if (document.extension === '.md') {\n        Object.entries(document).forEach(([key, value]) => {\n          const _key = `case_insensitive__${key}`; // prefix is arbitrary\n\n          if (!document[_key] && typeof value === 'string') {\n            document[_key] = value.toLocaleLowerCase();\n          }\n        });\n      }\n    }\n  }\n};\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, call "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sortBy"}]},{"type":"text","value":" method with the extra prop's key by which to sort."}]},{"type":"element","tag":"code","props":{"code":"export default {\n  async asyncData({ $content, params }) {\n    const articles = await $content('articles', params.slug)\n      .sortBy('case_insensitive__title', 'asc') // Set prefixed prop\n      .fetch()\n\n    return {\n      articles\n    }\n  }\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  async asyncData({ $content, params }) {\n    const articles = await $content('articles', params.slug)\n      .sortBy('case_insensitive__title', 'asc') // Set prefixed prop\n      .fetch()\n\n    return {\n      articles\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Check out the "},{"type":"element","tag":"a","props":{"href":"/fetching#sortbykey-direction"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sortBy"}]},{"type":"text","value":" documentation"}]}]}]},{"type":"element","tag":"h3","props":{"id":"table-of-contents"},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add a table of contents by looping over our array of toc and use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"id"}]},{"type":"text","value":" to link to it and the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" to show the title. We can use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"depth"}]},{"type":"text","value":" to style the titles differently:"}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <ul>\n    <li\n      v-for=\"link of article.toc\"\n      :key=\"link.id\"\n      :class=\"{ 'toc2': link.depth === 2, 'toc3': link.depth === 3 }\"\n    >\n      <NuxtLink :to=\"`#${link.id}`\">{{ link.text }}</NuxtLink>\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug)\n      .fetch()\n\n    return {\n      article\n    }\n  }\n}\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <ul>\n    <li\n      v-for=\"link of article.toc\"\n      :key=\"link.id\"\n      :class=\"{ 'toc2': link.depth === 2, 'toc3': link.depth === 3 }\"\n    >\n      <NuxtLink :to=\"`#${link.id}`\">{{ link.text }}</NuxtLink>\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  async asyncData({ $content, params }) {\n    const article = await $content('articles', params.slug)\n      .fetch()\n\n    return {\n      article\n    }\n  }\n}\n</script>\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Check out the "},{"type":"element","tag":"a","props":{"href":"/writing#table-of-contents"},"children":[{"type":"text","value":"Table of contents documentation"}]}]}]},{"type":"element","tag":"h3","props":{"id":"dynamic-routing"},"children":[{"type":"text","value":"Dynamic routing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's say you want to create an app with routes following the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"content/"}]},{"type":"text","value":" file structure. You can do so by creating a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/_.vue"}]},{"type":"text","value":" component:"}]},{"type":"element","tag":"code","props":{"code":"<script>\nexport default {\n  async asyncData ({ $content, app, params, error }) {\n    const path = `/${params.pathMatch || 'index'}`\n    const [article] = await $content({ deep: true }).where({ path }).fetch()\n\n    if (!article) {\n      return error({ statusCode: 404, message: 'Article not found' })\n    }\n\n    return {\n      article\n    }\n  }\n}\n</script>\n","filename":"pages/_.vue","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script>\nexport default {\n  async asyncData ({ $content, app, params, error }) {\n    const path = `/${params.pathMatch || 'index'}`\n    const [article] = await $content({ deep: true }).where({ path }).fetch()\n\n    if (!article) {\n      return error({ statusCode: 404, message: 'Article not found' })\n    }\n\n    return {\n      article\n    }\n  }\n}\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This way, if you go the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/themes/docs"}]},{"type":"text","value":" route, it will display the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"content/themes/docs.md"}]},{"type":"text","value":" file. If you need an index page for your directories, you need to create a file with the same name as the directory:"}]},{"type":"element","tag":"code","props":{"code":"content/\n  themes/\n    docs.md\n  themes.md\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"content/\n  themes/\n    docs.md\n  themes.md\n"}]}]}]},{"type":"element","tag":"alert","props":{"type":"warning"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Don't forget to prefix your calls with the current locale if you're using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-i18n"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"custom-highlighter"},"children":[{"type":"text","value":"Custom Highlighter"}]},{"type":"element","tag":"h4","props":{"id":"highlightjs"},"children":[{"type":"text","value":"Highlight.js"}]},{"type":"element","tag":"code","props":{"code":"import highlightjs from 'highlight.js'\n\nconst wrap = (code, lang) => `<pre><code class=\"hljs ${lang}\">${code}</code></pre>`\n\nexport default {\n  // Complete themes: https://github.com/highlightjs/highlight.js/tree/master/src/styles\n  css: ['highlight.js/styles/nord.css'],\n\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      highlighter(rawCode, lang) {\n        if (!lang) {\n          return wrap(highlightjs.highlightAuto(rawCode).value, lang)\n        }\n        return wrap(highlightjs.highlight(rawCode, { language: lang }).value, lang)\n      }\n    }\n  }\n}\n","filename":"nuxt.config.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import highlightjs from 'highlight.js'\n\nconst wrap = (code, lang) => `<pre><code class=\"hljs ${lang}\">${code}</code></pre>`\n\nexport default {\n  // Complete themes: https://github.com/highlightjs/highlight.js/tree/master/src/styles\n  css: ['highlight.js/styles/nord.css'],\n\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      highlighter(rawCode, lang) {\n        if (!lang) {\n          return wrap(highlightjs.highlightAuto(rawCode).value, lang)\n        }\n        return wrap(highlightjs.highlight(rawCode, { language: lang }).value, lang)\n      }\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"shiki"},"children":[{"type":"text","value":"Shiki"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/shikijs/shiki","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Shiki"}]},{"type":"text","value":" is syntax highlighter that uses TexMate grammar and colors the tokens with VS Code themes. It will generate HTML that looks like exactly your code in VS Code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You don't need to add custom styling, because Shiki will inline it in the HTML."}]},{"type":"element","tag":"code","props":{"code":"import shiki from 'shiki'\n\nexport default {\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      async highlighter() {\n        const highlighter = await shiki.getHighlighter({\n          // Complete themes: https://github.com/shikijs/shiki/tree/master/packages/themes\n          theme: 'nord'\n        })\n        return (rawCode, lang) => {\n          return highlighter.codeToHtml(rawCode, lang)\n        }\n      }\n    }\n  }\n}\n","filename":"nuxt.config.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import shiki from 'shiki'\n\nexport default {\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      async highlighter() {\n        const highlighter = await shiki.getHighlighter({\n          // Complete themes: https://github.com/shikijs/shiki/tree/master/packages/themes\n          theme: 'nord'\n        })\n        return (rawCode, lang) => {\n          return highlighter.codeToHtml(rawCode, lang)\n        }\n      }\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"shiki-twoslash"},"children":[{"type":"text","value":"Shiki Twoslash"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/microsoft/TypeScript-Website/tree/v2/packages/ts-twoslasher","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Twoslash"}]},{"type":"text","value":" is a markup format for TypeScript code. Internally, Twoslash uses the TypeScript compiler to generate rich highlight info."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To get a better idea of how Twoslash works, you can go over to the "},{"type":"element","tag":"a","props":{"href":"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#type-aliases","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Official TypeScript Documentation"}]},{"type":"text","value":" and hover over some code examples there."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can achieve the same result by using "},{"type":"element","tag":"a","props":{"href":"https://github.com/microsoft/TypeScript-Website/tree/v2/packages/shiki-twoslash","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Shiki Twoslash"}]},{"type":"text","value":". This package is also the one that powers the Official TypeScript Documentation."}]},{"type":"element","tag":"code","props":{"code":"import {\n  createShikiHighlighter,\n  runTwoSlash,\n  renderCodeToHTML\n} from 'shiki-twoslash'\n\nexport default {\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      async highlighter() {\n        const highlighter = await createShikiHighlighter({\n          // Complete themes: https://github.com/shikijs/shiki/tree/master/packages/themes\n          theme: 'nord'\n        })\n        return (rawCode, lang) => {\n          const twoslashResults = runTwoSlash(rawCode, lang)\n          return renderCodeToHTML(\n            twoslashResults.code,\n            lang,\n            ['twoslash'],\n            {},\n            highlighter,\n            twoslashResults\n          )\n        }\n      }\n    }\n  }\n}\n","filename":"nuxt.config.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import {\n  createShikiHighlighter,\n  runTwoSlash,\n  renderCodeToHTML\n} from 'shiki-twoslash'\n\nexport default {\n  modules: ['@nuxt/content'],\n\n  content: {\n    markdown: {\n      async highlighter() {\n        const highlighter = await createShikiHighlighter({\n          // Complete themes: https://github.com/shikijs/shiki/tree/master/packages/themes\n          theme: 'nord'\n        })\n        return (rawCode, lang) => {\n          const twoslashResults = runTwoSlash(rawCode, lang)\n          return renderCodeToHTML(\n            twoslashResults.code,\n            lang,\n            ['twoslash'],\n            {},\n            highlighter,\n            twoslashResults\n          )\n        }\n      }\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"remark-plugin"},"children":[{"type":"text","value":"Remark Plugin"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt Content uses "},{"type":"element","tag":"a","props":{"href":"https://github.com/remarkjs/remark","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"remark"}]},{"type":"text","value":" under the hood to process markdown documents. Creating remark plugins is a way to manipulate documents and add new features."}]},{"type":"element","tag":"h4","props":{"id":"list-all-contributors"},"children":[{"type":"text","value":"List all contributors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's say you want to list all contributors of the project in a document. You can create a plugin that fetches all contributors and injects them into the document data."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create the plugin. This plugin fetches the contributors if "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"fetchContributors"}]},{"type":"text","value":" is set to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"true"}]}]}]},{"type":"element","tag":"code","props":{"code":"const fetch = require('node-fetch')\n\nmodule.exports = function () {\n  return async (tree, { data }) => {\n    if (data.fetchContributors) {\n      const contributors = await fetch(\n        'https://api.github.com/repos/nuxt/content/contributors'\n      ).then(res => res.json())\n      .then(res => res.map(({ login }) => login))\n\n      data.$contributors = [...new Set(contributors)]\n    }\n    return tree\n  }\n}\n","filename":"~~/plugins/contributors.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const fetch = require('node-fetch')\n\nmodule.exports = function () {\n  return async (tree, { data }) => {\n    if (data.fetchContributors) {\n      const contributors = await fetch(\n        'https://api.github.com/repos/nuxt/content/contributors'\n      ).then(res => res.json())\n      .then(res => res.map(({ login }) => login))\n\n      data.$contributors = [...new Set(contributors)]\n    }\n    return tree\n  }\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Register plugin in Nuxt config"}]}]},{"type":"element","tag":"code","props":{"code":"export default {\n  contents: {\n    markdown: {\n      remarkPlugins: [\n        '~~/plugins/contributors.js'\n      ]\n    }\n  }\n}\n","filename":"nuxt.config.js","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  contents: {\n    markdown: {\n      remarkPlugins: [\n        '~~/plugins/contributors.js'\n      ]\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a simple component to show contributors"}]}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <ul>\n    <li v-for=\"(item, i) in items\" :key=\"i\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    }\n  }\n}\n","filename":"~~/components/List.vue","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <ul>\n    <li v-for=\"(item, i) in items\" :key=\"i\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    }\n  }\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finally use the components and mark the document to fetch the contributors"}]}]},{"type":"element","tag":"code","props":{"code":"---\ntitle: Nuxt Content\nfetchContributors: true\n---\n\n## Contributors\n\n<list :items=\"$contributors\"></list>\n\n","filename":"document.md","language":"md"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"---\ntitle: Nuxt Content\nfetchContributors: true\n---\n\n## Contributors\n\n<list :items=\"$contributors\"></list>\n\n"}]}]}]}]},"category":"Community","subtitle":"Check out these code snippets that can be copied directly into your application.","version":1.1,"_type":"markdown","_id":"v1:v1:3.community:1.snippets.md","_source":"v1","_file":"v1/3.community/1.snippets.md","_extension":"md"},null]