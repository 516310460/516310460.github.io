[{"_path":"/ru/v1/examples/tailwindcss-typography","_draft":false,"_partial":false,"_empty":false,"title":"Пример TailwindCSS Typography","description":"Пример использования плагина TailwindCSS Typography для Nuxt Content на CodeSandbox.","excerpt":{"type":"root","children":[{"type":"element","tag":"sandbox","props":{"src":"https://codesandbox.io/embed/nuxt-content-tailwindcss-typography-twhtf?hidenavigation=1&theme=dark"},"children":[]}]},"toc":false,"_type":"markdown","_id":"v1-ru:ru:v1:2.examples:tailwindcss-typography.md","_source":"v1-ru","_file":"ru/v1/2.examples/tailwindcss-typography.md","_extension":"md"},{"_path":"/ru/v1/community/integrations","_draft":false,"_partial":false,"_empty":false,"title":"Интеграции","description":"Изучите как использовать @nuxt/content с другими модулями.","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"nuxtjsfeed"},"children":[{"type":"text","value":"@nuxtjs/feed"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"С случае со статьями, контент может использоваться для генерации новостной ленты с использованием модуля "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt-community/feed-module","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"@nuxtjs/feed"}]},{"type":"text","value":"."}]},{"type":"element","tag":"alert","props":{"type":"info"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Для использования "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$content"}]},{"type":"text","value":" внутри параметра "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"feed"}]},{"type":"text","value":", вам нужно добавить "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@nuxt/content"}]},{"type":"text","value":" перед "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"@nuxtjs/feed"}]},{"type":"text","value":" в "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"modules"}]},{"type":"text","value":" вашего файла конфигурации."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Пример"}]}]},{"type":"element","tag":"code","props":{"code":"export default {\n  modules: [\n    '@nuxt/content',\n    '@nuxtjs/feed'\n  ],\n\n  feed () {\n    const baseUrlArticles = 'https://mywebsite.com/articles'\n    const baseLinkFeedArticles = '/feed/articles'\n    const feedFormats = {\n      rss: { type: 'rss2', file: 'rss.xml' },\n      atom: { type: 'atom1', file: 'atom.xml' },\n      json: { type: 'json1', file: 'feed.json' },\n    }\n    const { $content } = require('@nuxt/content')\n\n    const createFeedArticles = async function (feed) {\n      feed.options = {\n        title: 'Мой блог',\n        description: 'Я пишу про технологии',\n        link: baseUrlArticles,\n      }\n      const articles = await $content('articles').fetch()\n\n      articles.forEach((article) => {\n        const url = `${baseUrlArticles}/${article.slug}`\n\n        feed.addItem({\n          title: article.title,\n          id: url,\n          link: url,\n          date: article.published,\n          description: article.summary,\n          content: article.summary,\n          author: article.authors,\n        })\n      })\n    }\n\n    return Object.values(feedFormats).map(({ file, type }) => ({\n      path: `${baseLinkFeedArticles}/${file}`,\n      type: type,\n      create: createFeedArticles,\n    }))\n  }\n}\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default {\n  modules: [\n    '@nuxt/content',\n    '@nuxtjs/feed'\n  ],\n\n  feed () {\n    const baseUrlArticles = 'https://mywebsite.com/articles'\n    const baseLinkFeedArticles = '/feed/articles'\n    const feedFormats = {\n      rss: { type: 'rss2', file: 'rss.xml' },\n      atom: { type: 'atom1', file: 'atom.xml' },\n      json: { type: 'json1', file: 'feed.json' },\n    }\n    const { $content } = require('@nuxt/content')\n\n    const createFeedArticles = async function (feed) {\n      feed.options = {\n        title: 'Мой блог',\n        description: 'Я пишу про технологии',\n        link: baseUrlArticles,\n      }\n      const articles = await $content('articles').fetch()\n\n      articles.forEach((article) => {\n        const url = `${baseUrlArticles}/${article.slug}`\n\n        feed.addItem({\n          title: article.title,\n          id: url,\n          link: url,\n          date: article.published,\n          description: article.summary,\n          content: article.summary,\n          author: article.authors,\n        })\n      })\n    }\n\n    return Object.values(feedFormats).map(({ file, type }) => ({\n      path: `${baseLinkFeedArticles}/${file}`,\n      type: type,\n      create: createFeedArticles,\n    }))\n  }\n}\n"}]}]}]}]},"_type":"markdown","_id":"v1-ru:ru:v1:3.community:2.integrations.md","_source":"v1-ru","_file":"ru/v1/3.community/2.integrations.md","_extension":"md"}]