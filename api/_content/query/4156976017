[{"_path":"/guide/displaying/typescript","_draft":false,"_partial":false,"_empty":false,"title":"TypeScript","description":"Nuxt Content v2 is built with TypeScript in mind.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The module exposes typings properly from configuration to query builder."}]},{"type":"element","tag":"h2","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"queryContent()"}]},{"type":"text","value":", you will retrieve a "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/content/blob/main/src/runtime/types.d.ts#L128","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"QueryBuilder"}]}]},{"type":"text","value":" instance."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once using one of the fetching methods ("},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"find()"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"findOne()"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"findSurround()"}]},{"type":"text","value":"), you will retrieve an object of type "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/content/blob/main/src/runtime/types.d.ts#L128","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ParsedContent"}]}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"type-augmentation"},"children":[{"type":"text","value":"Type augmentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are adding keys to front-matter other than the "},{"type":"element","tag":"a","props":{"href":"/guide/writing/markdown#front-matter"},"children":[{"type":"text","value":"defaults key"}]},{"type":"text","value":", you might want to have typings over these."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is currently possible, yet not in an "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"optimal"}]},{"type":"text","value":" way."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The recommended way to do it is by using this method:"}]},{"type":"element","tag":"code","props":{"code":"<script setup lang=\"ts\">\nimport type { ParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface MyCustomParsedContent extends ParsedContent {\n  yourOwn: 'keys'\n  foo: 'bar'\n  baz: 'bar'\n}\n\n// That `data` key will be typed with `MyCustomParsedContent`\nconst { data } = await useAsyncData(\n  () => queryContent<MyCustomParsedContent>({ ...anyQuery })\n)\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup lang=\"ts\">\nimport type { ParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface MyCustomParsedContent extends ParsedContent {\n  yourOwn: 'keys'\n  foo: 'bar'\n  baz: 'bar'\n}\n\n// That `data` key will be typed with `MyCustomParsedContent`\nconst { data } = await useAsyncData(\n  () => queryContent<MyCustomParsedContent>({ ...anyQuery })\n)\n</script>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"markdown-specific-types"},"children":[{"type":"text","value":"Markdown Specific Types"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you know the content being fetched will be Markdown, then you can extend the "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"MarkdownParsedContent"}]},{"type":"text","value":" type for improved\ntype-safety."}]},{"type":"element","tag":"code","props":{"code":"<script setup lang=\"ts\">\nimport type { MarkdownParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface Article extends MarkdownParsedContent {\n  author: string\n}\nconst { data } = await useAsyncData(\n  'first-article',\n  () => queryContent<Article>('articles').findOne()\n)\n// data.value.author will be typed as well as markdown specific entries\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup lang=\"ts\">\nimport type { MarkdownParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface Article extends MarkdownParsedContent {\n  author: string\n}\nconst { data } = await useAsyncData(\n  'first-article',\n  () => queryContent<Article>('articles').findOne()\n)\n// data.value.author will be typed as well as markdown specific entries\n</script>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"the-future"},"children":[{"type":"text","value":"The future"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TypeScript support is a strong focus for us."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We want to provide fully generated type for each content in your project, that would allow the same as type augmentation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is not yet implemented but will be part of the roadmap in upcoming months."}]},{"type":"element","tag":"alert","props":{"type":"warning"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can track #1057 if you want to know more about roadmap for TypeScript support of front-matter keys."}]}]}]},"_type":"markdown","_id":"content:3.guide:2.displaying:4.typescript.md","_source":"content","_file":"3.guide/2.displaying/4.typescript.md","_extension":"md"},{"_path":"/guide/migration/from-v1","_draft":false,"_partial":false,"_empty":false,"title":"From Content v1","description":"Learn how to upgrade from Nuxt Content V1 to Nuxt Content V2 for Nuxt 3.","excerpt":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make sure your dev server ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt dev"}]},{"type":"text","value":") isn't running and remove any package lock files ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"package-lock.json"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"yarn.lock"}]},{"type":"text","value":")"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Upgrade to Nuxt 3 (check out the "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/getting-started/migration","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3 migration guide"}]},{"type":"text","value":")"},{"type":"element","tag":"code","props":{"code":"- \"nuxt\": \"latest\"\n+ \"nuxt\": \"^3.0.0-rc.3\"\n","language":"diff"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- \"nuxt\": \"latest\"\n+ \"nuxt\": \"^3.0.0-rc.3\"\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Upgrade Content module"},{"type":"element","tag":"code","props":{"code":"- \"@nuxt/content\": \"^1.15.1\"\n+ \"@nuxt/content\": \"^2.0\"\n","language":"diff"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- \"@nuxt/content\": \"^1.15.1\"\n+ \"@nuxt/content\": \"^2.0\"\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Then, reinstall your dependencies:"},{"type":"element","tag":"code","props":{"code":"yarn install\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"yarn install\n"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"global-components"},"children":[{"type":"text","value":"Global Components"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The global components directory for Nuxt Content v2 is now "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~/components/content"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"- components/global\n+ components/content\n","language":"diff"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- components/global\n+ components/content\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"fetching-content"},"children":[{"type":"text","value":"Fetching Content"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There is no global "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$content"}]},{"type":"text","value":" variable, instead you can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"queryContent"}]},{"type":"text","value":" composable to fetch contents."}]},{"type":"element","tag":"code","props":{"code":"- const posts = await this.$content('/blog', { deep: true }).only(['title']).fetch()\n+ const { data: posts } = await useAsyncData('posts-list', () => queryContent('/blog').only(['title']).find())\n","language":"diff"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- const posts = await this.$content('/blog', { deep: true }).only(['title']).fetch()\n+ const { data: posts } = await useAsyncData('posts-list', () => queryContent('/blog').only(['title']).find())\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"queryContent"}]},{"type":"text","value":" provide same utilities as legacy "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$content"}]},{"type":"text","value":" with some improvements:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"fetch"}]},{"type":"text","value":" dropped in favor of new find utils"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/api/composables/query-content#find"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"find"}]}]},{"type":"text","value":": retrieve a list of contents"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/api/composables/query-content#findOne"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"findOne"}]}]},{"type":"text","value":": retrive first matched content"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"surround"}]},{"type":"text","value":" dropped in favor of "},{"type":"element","tag":"a","props":{"href":"/api/composables/query-content#findSurround"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"findSurround"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/api/composables/query-content#where"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"where"}]}]},{"type":"text","value":" utility can be chained"},{"type":"element","tag":"code","props":{"code":"queryContent()\n  .where({ /* first step conditions */ })\n  .where({ /* second step conditions */ })\n  .find()\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"queryContent()\n  .where({ /* first step conditions */ })\n  .where({ /* second step conditions */ })\n  .find()\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"There is no "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"search"}]},{"type":"text","value":" utility for full text search."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Find utilities does not contains body of documents and they only include meta information of parsed contents. You can fetch contents body using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getContentDocument"}]},{"type":"text","value":"(non-reactive) or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useContentDocument"}]},{"type":"text","value":"(reactive) composables"},{"type":"element","tag":"code","props":{"code":"const doc = await getContentDocument(post.id)\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const doc = await getContentDocument(post.id)\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"There is new "},{"type":"element","tag":"a","props":{"href":"/api/composables/query-content#findnavigation"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"findNavigation"}]}]},{"type":"text","value":" utility to retrieve navigation object"}]}]},{"type":"element","tag":"h2","props":{"id":"rendering-content"},"children":[{"type":"text","value":"Rendering Content"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<NuxtContent>"}]},{"type":"text","value":" component removed in favor of a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<ContentRenderer>"}]},{"type":"text","value":" component."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<ContentDoc>"}]},{"type":"text","value":" component receive document path then fetch and render the document."}]},{"type":"element","tag":"code","props":{"code":"<script setup lang=\"ts\">\nconst route = useRoute()\n\nconst { data } = await useAsyncData('get-document', () => queryContent(route.path).findOne())\n</script>\n\n<template>\n  <ContentRenderer :value=\"data\" />\n</template>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup lang=\"ts\">\nconst route = useRoute()\n\nconst { data } = await useAsyncData('get-document', () => queryContent(route.path).findOne())\n</script>\n\n<template>\n  <ContentRenderer :value=\"data\" />\n</template>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can go even faster if you know that "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"route.path"}]},{"type":"text","value":" will be the same as your content files, use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<ContentDoc>"}]},{"type":"text","value":" component:"}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <ContentDoc />\n</template>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <ContentDoc />\n</template>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<ContentDoc>"}]},{"type":"text","value":" component will fetch the document for the current route path and use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<ContentRenderer>"}]},{"type":"text","value":" to render it."}]},{"type":"element","tag":"h2","props":{"id":"feature-comparison"},"children":[{"type":"text","value":"Feature comparison"}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"Feature / Version"}]},{"type":"element","tag":"th","props":{"align":"center"},"children":[{"type":"text","value":"Convent v1"}]},{"type":"element","tag":"th","props":{"align":"center"},"children":[{"type":"text","value":"Content v2"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Nuxt Version"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt@2.x"}]}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt@3.x"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Supported files"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".md"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".yaml"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".yml"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".csv"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".json"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".json5"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".xml"}]}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".md"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".yaml"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".yml"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".csv"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".json"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".json5"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Full text search"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Reactive Composables"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"a","props":{"href":"/guide/writing/markdown#front-matter"},"children":[{"type":"text","value":"FrontMatter"}]}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"a","props":{"href":"https://content.nuxtjs.org/writing#excerpt","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Excerpt"}]}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"a","props":{"href":"https://content.nuxtjs.org/writing#table-of-contents","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Table Of Contents"}]}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"MDC Components syntax"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Multi Source"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Locale Support"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"Content Navigation"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"❌"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"✅"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"querying-content"},"children":[{"type":"text","value":"Querying content"}]},{"type":"element","tag":"alert","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Learn more about query methods in the "},{"type":"element","tag":"a","props":{"href":"/api/composables/query-content"},"children":[{"type":"text","value":"API reference"}]}]}]}]},"_type":"markdown","_id":"content:3.guide:4.migration:1.from-v1.md","_source":"content","_file":"3.guide/4.migration/1.from-v1.md","_extension":"md"}]