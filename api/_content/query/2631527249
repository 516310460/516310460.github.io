[{"_path":"/guide/displaying/querying","_draft":false,"_partial":false,"_empty":false,"title":"Querying","description":"Any component or page of your application can fetch content from the content/ directory.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"queryContent()"}]},{"type":"text","value":" function is auto-imported by Nuxt Content to build queries with a MongoDB-like syntax."}]},{"type":"element","tag":"h2","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"h3","props":{"id":"create-a-query-builder"},"children":[{"type":"text","value":"Create a query builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new query builder with "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"queryContent()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can give a path as a parameter, starting at the root of your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"content/"}]},{"type":"text","value":" directory."}]},{"type":"element","tag":"code","props":{"code":"queryContent('/')\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"queryContent('/')\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"resolve-the-query"},"children":[{"type":"text","value":"Resolve the query"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Resolve the query with one of these methods:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"find()"}]},{"type":"text","value":" will always return an array of one or more items corresponding to documents in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"content/"}]},{"type":"text","value":" directory."}]}]},{"type":"element","tag":"code","props":{"code":"/* returns every document found at the root (/) path of the content/ directory */\nqueryContent('/').find()\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/* returns every document found at the root (/) path of the content/ directory */\nqueryContent('/').find()\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"findOne()"}]},{"type":"text","value":" will return an object corresponding to the matching document."}]}]},{"type":"element","tag":"code","props":{"code":"/* returns only the matching index.md found at the root (/) path of the content/ directory */\nqueryContent('/').findOne()\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/* returns only the matching index.md found at the root (/) path of the content/ directory */\nqueryContent('/').findOne()\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"with-useasyncdata"},"children":[{"type":"text","value":"With "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useAsyncData"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Wrap your query in the "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/api/composables/use-async-data","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useAsyncData"}]},{"type":"text","value":" composable"}]},{"type":"text","value":" (auto-imported as well)."}]},{"type":"element","tag":"code","props":{"code":"const { data } = await useAsyncData('home', () => queryContent('/').findOne())\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const { data } = await useAsyncData('home', () => queryContent('/').findOne())\n"}]}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"<script setup>\nconst { data } = await useAsyncData('home', () => queryContent('/').findOne())\n</script>\n\n<template>\n<main>\n  <pre>\n    {{ data }}\n  </pre>\n</main>\n</template>\n","filename":"app.vue","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup>\nconst { data } = await useAsyncData('home', () => queryContent('/').findOne())\n</script>\n\n<template>\n<main>\n  <pre>\n    {{ data }}\n  </pre>\n</main>\n</template>\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"  # Hello Content v2!\n\n  Content V2 is a Git-based CMS\n","filename":"content/index.md","language":"md"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  # Hello Content v2!\n\n  Content V2 is a Git-based CMS\n"}]}]}]},{"type":"element","tag":"code-block","props":{":preview":"true","label":"Preview","preview":true},"children":[{"type":"text","value":"  "},{"type":"element","tag":"pre","props":{},"children":[{"type":"text","value":"  {\n    \"_path\":\"/\",\n    \"_draft\":false,\n    \"_partial\":false,\n    \"_empty\":false,\n    \"title\":\"Hello Content V2!\",\n    \"description\":\"\",\n    \"body\":{\n      \"type\":\"root\",\n      \"children\":[\n        {\n            \"type\":\"element\",\n            \"tag\":\"h1\",\n            \"props\":{\n              \"id\":\"hello-content-v2\"\n            },\n            \"children\":[\n              {\n                  \"type\":\"text\",\n                  \"value\":\"Hello Content V2!\"\n              }\n            ]\n        }\n      ],\n      \"toc\":{\n        \"title\":\"\",\n        \"searchDepth\":2,\n        \"depth\":2,\n        \"links\":[]\n      }\n    },\n    \"_type\":\"markdown\",\n    \"_id\":\"content:index.md\",\n    \"_source\":\"content\",\n    \"_file\":\"index.md\",\n    \"_extension\":\"md\"\n  }\n  "}]}]}]},{"type":"element","tag":"h2","props":{"id":"query-builder"},"children":[{"type":"text","value":"Query builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"queryContent()"}]},{"type":"text","value":" supports methods chaining to create advanced queries."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once your query is ready, make sure to end your call with "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":".find()"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":".findOne()"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":".findSurround()"}]},{"type":"text","value":" to effectively trigger data fetching."}]},{"type":"element","tag":"alert","props":{"type":"info"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Discover every query methods in the "},{"type":"element","tag":"a","props":{"href":"/api/composables/query-content"},"children":[{"type":"text","value":"API reference"}]}]}]},{"type":"element","tag":"h3","props":{"id":"example"},"children":[{"type":"text","value":"Example"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This example uses the "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"where()"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"only()"}]},{"type":"text","value":" methods to fetch the title of the document corresponding to the current browser URL."}]},{"type":"element","tag":"code","props":{"code":"<script setup>\nconst { path } = useRoute()\n\nconst { data } = await useAsyncData(`content-${path}`, () => {\n  return queryContent().where({ _path: path }).only(['title']).findOne()\n})\n</script>\n\n<template>\n  <main>\n    <h1>{{ data.title }}</h1>\n  </main>\n</template>\n","language":"html"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup>\nconst { path } = useRoute()\n\nconst { data } = await useAsyncData(`content-${path}`, () => {\n  return queryContent().where({ _path: path }).only(['title']).findOne()\n})\n</script>\n\n<template>\n  <main>\n    <h1>{{ data.title }}</h1>\n  </main>\n</template>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"api-routes"},"children":[{"type":"text","value":"API routes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt Content creates a REST "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET"}]},{"type":"text","value":" endpoint for each document in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"content/"}]},{"type":"text","value":" directory."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The API root path "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/api/_content/query"}]},{"type":"text","value":" accepts query parameters such as:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/api/_content/query?only=title"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/api/_content/query?sort=size:1"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/api/_content/query?without=body"}]}]}]},{"type":"element","tag":"h3","props":{"id":"example-1"},"children":[{"type":"text","value":"Example"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"# Hello Content v2!\n","filename":"content/hello.md","language":"md"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# Hello Content v2!\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"/api/_content/query?path=/hello\n","filename":"Endpoint","language":"text"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/api/_content/query?path=/hello\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"[\n  {\n    \"_path\": \"/hello\",\n    \"_draft\": false,\n    \"_partial\": false,\n    \"_empty\": false,\n    \"title\": \"Hello!\",\n    \"description\": \"\",\n    \"body\": {\n      \"type\": \"root\",\n      \"children\": [\n        {\n          \"type\": \"element\",\n          \"tag\": \"h1\",\n          \"props\": {\n            \"id\": \"hello!\"\n          },\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"value\": \"Hello!\"\n            }\n          ]\n        }\n      ],\n      \"toc\": {\n        \"title\": \"\",\n        \"searchDepth\": 2,\n        \"depth\": 2,\n        \"links\": []\n      }\n    },\n    \"_type\": \"markdown\",\n    \"_id\": \"content:hello.md\",\n    \"_source\": \"content\",\n    \"_file\": \"hello.md\",\n    \"_extension\": \"md\"\n  }\n]\n","filename":"Response","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[\n  {\n    \"_path\": \"/hello\",\n    \"_draft\": false,\n    \"_partial\": false,\n    \"_empty\": false,\n    \"title\": \"Hello!\",\n    \"description\": \"\",\n    \"body\": {\n      \"type\": \"root\",\n      \"children\": [\n        {\n          \"type\": \"element\",\n          \"tag\": \"h1\",\n          \"props\": {\n            \"id\": \"hello!\"\n          },\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"value\": \"Hello!\"\n            }\n          ]\n        }\n      ],\n      \"toc\": {\n        \"title\": \"\",\n        \"searchDepth\": 2,\n        \"depth\": 2,\n        \"links\": []\n      }\n    },\n    \"_type\": \"markdown\",\n    \"_id\": \"content:hello.md\",\n    \"_source\": \"content\",\n    \"_file\": \"hello.md\",\n    \"_extension\": \"md\"\n  }\n]\n"}]}]}]}]}]},"_type":"markdown","_id":"content:3.guide:2.displaying:2.querying.md","_source":"content","_file":"3.guide/2.displaying/2.querying.md","_extension":"md"},{"_path":"/guide/displaying/typescript","_draft":false,"_partial":false,"_empty":false,"title":"TypeScript","description":"Nuxt Content v2 is built with TypeScript in mind.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The module exposes typings properly from configuration to query builder."}]},{"type":"element","tag":"h2","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"queryContent()"}]},{"type":"text","value":", you will retrieve a "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/content/blob/main/src/runtime/types.d.ts#L128","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"QueryBuilder"}]}]},{"type":"text","value":" instance."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once using one of the fetching methods ("},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"find()"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"findOne()"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"findSurround()"}]},{"type":"text","value":"), you will retrieve an object of type "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/content/blob/main/src/runtime/types.d.ts#L128","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ParsedContent"}]}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"type-augmentation"},"children":[{"type":"text","value":"Type augmentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are adding keys to front-matter other than the "},{"type":"element","tag":"a","props":{"href":"/guide/writing/markdown#front-matter"},"children":[{"type":"text","value":"defaults key"}]},{"type":"text","value":", you might want to have typings over these."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is currently possible, yet not in an "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"optimal"}]},{"type":"text","value":" way."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The recommended way to do it is by using this method:"}]},{"type":"element","tag":"code","props":{"code":"<script setup lang=\"ts\">\nimport type { ParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface MyCustomParsedContent extends ParsedContent {\n  yourOwn: 'keys'\n  foo: 'bar'\n  baz: 'bar'\n}\n\n// That `data` key will be typed with `MyCustomParsedContent`\nconst { data } = await useAsyncData(\n  () => queryContent<MyCustomParsedContent>({ ...anyQuery })\n)\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup lang=\"ts\">\nimport type { ParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface MyCustomParsedContent extends ParsedContent {\n  yourOwn: 'keys'\n  foo: 'bar'\n  baz: 'bar'\n}\n\n// That `data` key will be typed with `MyCustomParsedContent`\nconst { data } = await useAsyncData(\n  () => queryContent<MyCustomParsedContent>({ ...anyQuery })\n)\n</script>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"markdown-specific-types"},"children":[{"type":"text","value":"Markdown Specific Types"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you know the content being fetched will be Markdown, then you can extend the "},{"type":"element","tag":"code-inline","props":{"lang":"ts"},"children":[{"type":"text","value":"MarkdownParsedContent"}]},{"type":"text","value":" type for improved\ntype-safety."}]},{"type":"element","tag":"code","props":{"code":"<script setup lang=\"ts\">\nimport type { MarkdownParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface Article extends MarkdownParsedContent {\n  author: string\n}\nconst { data } = await useAsyncData(\n  'first-article',\n  () => queryContent<Article>('articles').findOne()\n)\n// data.value.author will be typed as well as markdown specific entries\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<script setup lang=\"ts\">\nimport type { MarkdownParsedContent } from '@nuxt/content/dist/runtime/types'\n\ninterface Article extends MarkdownParsedContent {\n  author: string\n}\nconst { data } = await useAsyncData(\n  'first-article',\n  () => queryContent<Article>('articles').findOne()\n)\n// data.value.author will be typed as well as markdown specific entries\n</script>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"the-future"},"children":[{"type":"text","value":"The future"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TypeScript support is a strong focus for us."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We want to provide fully generated type for each content in your project, that would allow the same as type augmentation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is not yet implemented but will be part of the roadmap in upcoming months."}]},{"type":"element","tag":"alert","props":{"type":"warning"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can track #1057 if you want to know more about roadmap for TypeScript support of front-matter keys."}]}]}]},"_type":"markdown","_id":"content:3.guide:2.displaying:4.typescript.md","_source":"content","_file":"3.guide/2.displaying/4.typescript.md","_extension":"md"}]